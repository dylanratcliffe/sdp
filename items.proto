syntax = "proto3";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


// _____/\\\\\\\\\\\____/\\\\\\\\\\\\_____/\\\\\\\\\\\\\___        
//  ___/\\\/////////\\\_\/\\\////////\\\__\/\\\/////////\\\_       
//   __\//\\\______\///__\/\\\______\//\\\_\/\\\_______\/\\\_      
//    ___\////\\\_________\/\\\_______\/\\\_\/\\\\\\\\\\\\\/__     
//     ______\////\\\______\/\\\_______\/\\\_\/\\\/////////____    
//      _________\////\\\___\/\\\_______\/\\\_\/\\\_____________   
//       __/\\\______\//\\\__\/\\\_______/\\\__\/\\\_____________  
//        _\///\\\\\\\\\\\/___\/\\\\\\\\\\\\/___\/\\\_____________ 
//         ___\///////////_____\////////////_____\///______________
option go_package = "sdp";

// RequestMethod represents the available request methods. The details of these
// methods are:
//
// GET: This takes a single unique query and should only return a single item.
//      If an item matching th paramter passed doesn't exist the server should
//      fail
//
// FIND: This takes no query (or ignores it) and should return all items that it
//       can find
//
// SEARCH: This takes a non-unique query which is designed to be used as a
//         search term. It should return some number of items (or zero) which
//         match the query
enum RequestMethod {
  GET = 0;
  FIND = 1;
  SEARCH = 2;
}

// ItemRequest represents a request for an item.
//
// Type: (Optional) The type of item that you are looking for, is this is not
// provided then the request will be for all types that the reviever knows
// about.
//
// Method: (Required) The request method to use
//
// Query: (Optional) The query to pass
message ItemRequest {
  // The type of item to search for
  string type = 1;

  // Which method to use when looking for it
  RequestMethod method = 2;

  // What query should be passed to that method
  string query = 3;
}

// ItemRequestError is sent back when an item request fails
message ItemRequestError {
  // The error type. Any types in here will be gracefully handled unless the
  // type os "OTHER"
  enum ErrorType {
    // NOTFOUND means that the item was not found. This is only returned as the
    // result of a GET request since all other requests would return an empty
    // list instead
    NOTFOUND = 0;

    // This should be used of all other failure modes
    OTHER = 1;
  }
  ErrorType type = 2;

  // The string contents of the error
  string error = 3;
}

// ItemAttributes represents the known attributes for an item. These are likely
// to be common to a given type, but even this is not guaranteed. All items must
// have at least one attribute however as it needs something to uniquely
// identify it
message ItemAttributes {
  google.protobuf.Struct attrStruct = 1;
}

// This is the same as Item within the package with a couple of exceptions, no
// real reason why this whole thing couldn't be modelled in protobuf though if
// required. Just need to decide what if anything should remain private
message Item {
  string type = 1;
  string uniqueAttribute = 2;
  ItemAttributes attributes = 3;
  Metadata metadata = 4;

  // --- Optional ---

  // Not all items will have relatedItems we are are using a two byte
  // integer to save one byte integers for more common things
  repeated ItemRequest linkedItemRequests = 16;

  // Linked items
  repeated Item linkedItems = 17;

  // If an item needs to return a socket it will do the following:
  //
  // 1. Call the sockert RPC on the server with the socketID as metadata
  // 2. Respond with the item and include a socket ID. This should by a UUID
  //    represented as a string of 128 bytes
  //
  // bytes socketID = 18;

  // TODO: Do I need the ID field? Or will this be regenerated? (For graphs)
}

// This is a list of items, like a Find() would return
message Items {
  repeated Item items = 1;
}

// Metadata about the item. Where it came from, how long it took, etc.
message Metadata {
  // The context within which the item is unique. Item uniqueness is determined
  // by the combination of type and uniqueAttribue value. However it is possible
  // for the same item to exist in many contexts. There is not formal definition
  // for what a context should be other than the fact that it should be somehwat
  // descriptive and should ensure item uniqueness
  string context = 1;

  // This is the name of the backend that was used to find the item.
  string backendName = 2;

  RequestMethod requestMethod = 3;

  // The time that the item was found
  google.protobuf.Timestamp timestamp = 4;

  // How long the backend took to execute in total when processing the
  // ItemRequest
  google.protobuf.Duration backendDuration = 5;

  // How long the backend took to execute per item when processing the
  // ItemRequest
  google.protobuf.Duration backendDurationPerItem = 6;
}
